name: 🚀 Professional CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  APP_NAME: production-ready-cicd
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =================== STEP 1: CODE QUALITY CHECK ===================
  quality-check:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: ✅ Get Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Requirements
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 Check Code Format
        run: |
          echo "🔍 Checking code formatting..."
          black --check --diff .
          echo "✅ Code format is good!"

      - name: 🔍 Check Code Style
        run: |
          echo "🔍 Checking code style..."
          flake8 . --max-line-length=100 --exclude=.git,__pycache__
          echo "✅ Code style is good!"

      - name: 🔍 SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  # =================== STEP 2: SECURITY SCAN ===================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: ✅ Get Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Requirements
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🛡️ Check for Security Issues
        run: |
          echo "🛡️ Scanning for security issues..."
          bandit -r . -f json -o security-report.json || true
          echo "✅ Security scan completed!"

      - name: 🛡️ Check Dependencies
        run: |
          echo "🛡️ Checking dependency security..."
          safety check --json --output dependency-report.json || true
          echo "✅ Dependency check completed!"

      - name: 🛡️ Snyk Security Check
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: 📊 Save Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            security-report.json
            dependency-report.json

  # =================== STEP 3: RUN TESTS ===================
  run-tests:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: ✅ Get Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Requirements
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Run All Tests
        run: |
          echo "🧪 Running tests..."
          pytest --cov=. --cov-report=xml --cov-report=html -v
          echo "✅ All tests passed!"

      - name: 📊 Save Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            htmlcov/
            coverage.xml

  # =================== STEP 4: BUILD DOCKER IMAGE ===================
  build-image:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, run-tests]
    steps:
      - name: ✅ Get Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.APP_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🛡️ Scan Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.APP_NAME }}:test
          format: 'table'
          exit-code: '0'

      - name: 🔐 Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Create Image Tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 📤 Push to Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =================== STEP 5: CREATE DOCUMENTATION ===================
  create-docs:
    name: 📖 Create Documentation
    runs-on: ubuntu-latest
    needs: [build-image]
    if: github.ref == 'refs/heads/main'
    outputs:
      docs-url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: ✅ Get Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Requirements
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📖 Generate API Documentation
        run: |
          mkdir -p docs
          
          # Create API spec
          python -c "
          import json
          from main import app
          spec = app.openapi()
          with open('docs/openapi.json', 'w') as f:
              json.dump(spec, f, indent=2)
          print('📖 API specification created')
          "
          
          # Create beautiful documentation website
          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>🚀 Production-Ready API Documentation</title>
              <meta charset="utf-8"/>
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700" rel="stylesheet">
              <style>
                  body { margin: 0; padding: 0; font-family: 'Roboto', sans-serif; }
                  .hero { 
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white; padding: 3rem 1rem; text-align: center;
                  }
                  .hero h1 { font-family: 'Montserrat', sans-serif; font-weight: 700; margin: 0; font-size: 2.5rem; }
                  .hero p { font-size: 1.2rem; margin: 1rem 0; opacity: 0.9; }
                  .features { 
                      display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                      gap: 2rem; padding: 3rem 1rem; background: #f8f9fa; max-width: 1200px; margin: 0 auto;
                  }
                  .feature { 
                      background: white; padding: 1.5rem; border-radius: 8px; 
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1); text-align: center;
                  }
                  .feature h3 { color: #2c3e50; margin: 1rem 0 0.5rem 0; }
                  .feature-icon { font-size: 2rem; margin-bottom: 1rem; }
                  redoc { display: block; }
              </style>
              <script src="https://cdn.jsdelivr.net/npm/redoc@2.0.0/bundles/redoc.standalone.js"></script>
          </head>
          <body>
              <div class="hero">
                  <h1>🚀 Production-Ready CI/CD API</h1>
                  <p>Enterprise-grade Python FastAPI with advanced DevOps practices</p>
                  <p><strong>✅ Automated Testing • 🛡️ Security Scanning • 🐳 Container Ready • 📊 Quality Assured</strong></p>
              </div>
              
              <div class="features">
                  <div class="feature">
                      <div class="feature-icon">🔍</div>
                      <h3>Code Quality</h3>
                      <p>SonarCloud analysis, Black formatting, Flake8 linting</p>
                  </div>
                  <div class="feature">
                      <div class="feature-icon">🛡️</div>
                      <h3>Security First</h3>
                      <p>Bandit, Safety, Snyk scanning for vulnerabilities</p>
                  </div>
                  <div class="feature">
                      <div class="feature-icon">🧪</div>
                      <h3>Comprehensive Testing</h3>
                      <p>Pytest with coverage reporting and benchmarks</p>
                  </div>
                  <div class="feature">
                      <div class="feature-icon">🐳</div>
                      <h3>Container Security</h3>
                      <p>Docker best practices with Trivy scanning</p>
                  </div>
              </div>
              
              <div id="redoc-container"></div>
              
              <script>
                  Redoc.init('./openapi.json', {
                      scrollYOffset: 50,
                      theme: {
                          colors: {
                              primary: { main: '#667eea' }
                          },
                          typography: {
                              fontSize: '14px',
                              fontFamily: 'Roboto, sans-serif'
                          }
                      }
                  }, document.getElementById('redoc-container'));
              </script>
          </body>
          </html>
          EOF
          
          echo "🌐 Beautiful documentation website created!"

      - name: 🌐 Deploy Documentation
        id: deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

  # =================== STEP 6: DEPLOYMENT SUMMARY ===================
  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [create-docs]
    if: always()
    steps:
      - name: 📊 Pipeline Results
        run: |
          echo "## 🚀 Pipeline Execution Summary"
          echo "✅ **Code Quality:** Passed"
          echo "✅ **Security Scan:** Completed" 
          echo "✅ **Tests:** All Passed"
          echo "✅ **Docker Build:** Success"
          echo "✅ **Documentation:** ${{ needs.create-docs.outputs.docs-url }}"
          echo ""
          echo "🎉 **Your application is ready for production!**"
