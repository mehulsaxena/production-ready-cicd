name: 🚀 Professional Security CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===============================================
  # 🧪 STAGE 1: TEST & QUALITY
  # ===============================================
  test-and-quality:
    name: 🧪 Test & Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🎨 Code Formatting Check
        run: |
          echo "🎨 Checking code formatting with Black..."
          black --check --diff . || (echo "❌ Code needs formatting. Run: black ." && exit 1)
          echo "✅ Code formatting looks good!"

      - name: 🔍 Code Style Check  
        run: |
          echo "🔍 Checking code style with Flake8..."
          flake8 . --max-line-length=100 --exclude=.git,__pycache__ || (echo "❌ Code style issues found" && exit 1)
          echo "✅ Code style looks good!"

      - name: 🧪 Run Unit Tests
        run: |
          echo "🧪 Running test suite..."
          pytest --cov=. --cov-report=term-missing -v || (echo "❌ Tests failed" && exit 1)
          echo "✅ All tests passed!"

      - name: 🛡️ Security Scan
        run: |
          echo "🛡️ Running security checks..."
          bandit -r . || echo "⚠️ Security warnings found (non-blocking)"
          safety check || echo "⚠️ Dependency warnings found (non-blocking)"
          echo "✅ Security scan completed!"

  # ===============================================
  # 🐳 STAGE 2: BUILD & PUSH CONTAINER
  # ===============================================
  build-container:
    name: 🐳 Build & Push Container
    runs-on: ubuntu-latest
    needs: test-and-quality
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Generate Tags & Labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ✅ Build Summary
        run: |
          echo "🎉 Container built successfully!"
          echo "📦 Image pushed to registry"
          echo "🔗 Registry: ${{ env.REGISTRY }}"

  # ===============================================
  # 🛡️ STAGE 3: CONTAINER SECURITY SCAN
  # ===============================================
  container-security:
    name: 🛡️ Container Security Scan
    runs-on: ubuntu-latest
    needs: build-container
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build Image for Scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: scan-image:latest
          cache-from: type=gha

      - name: 🛡️ Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'scan-image:latest'
          format: 'table'
          exit-code: '0'

      - name: ✅ Security Scan Complete
        run: |
          echo "🛡️ Container security scan completed!"
          echo "📊 Check the logs above for any vulnerabilities"

  # ===============================================
  # 🌐 STAGE 4: DEPLOY DOCUMENTATION
  # ===============================================
  deploy-docs:
    name: 🌐 Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build-container, container-security]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🌐 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

      - name: ✅ Deployment Success
        run: |
          echo "🎉 Documentation deployed successfully!"
          echo "🌐 Visit: https://mehulsaxena.github.io/production-ready-cicd/"

  # ===============================================
  # 📊 STAGE 5: FINAL REPORT
  # ===============================================
  final-report:
    name: 📊 Pipeline Report
    runs-on: ubuntu-latest
    needs: [test-and-quality, build-container, container-security, deploy-docs]
    if: always()
    steps:
      - name: 📊 Generate Pipeline Report
        run: |
          echo "# 🚀 CI/CD Pipeline Report"
          echo ""
          echo "## Pipeline Status"
          echo "- 🧪 **Testing & Quality:** ${{ needs.test-and-quality.result }}"
          echo "- 🐳 **Container Build:** ${{ needs.build-container.result }}"  
          echo "- 🛡️ **Security Scan:** ${{ needs.container-security.result }}"
          echo "- 🌐 **Documentation:** ${{ needs.deploy-docs.result }}"
          echo ""
          if [[ "${{ needs.test-and-quality.result }}" == "success" && "${{ needs.build-container.result }}" == "success" ]]; then
            echo "## ✅ Status: READY FOR PRODUCTION!"
            echo "🌐 **Live Documentation:** https://mehulsaxena.github.io/production-ready-cicd/"
          else
            echo "## ❌ Status: Issues Found - Check Logs"
          fi

      - name: 🎯 Success Message
        if: needs.test-and-quality.result == 'success' && needs.build-container.result == 'success'
        run: |
          echo "🎉 Congratulations! Your application is production-ready!"
          echo "✅ All quality checks passed"
          echo "✅ Container built and secured"
          echo "✅ Documentation deployed"
          echo "🌐 View your API docs at: https://mehulsaxena.github.io/production-ready-cicd/"
